using Microsoft.EntityFrameworkCore;
using MyBlog.Entities.Concrete;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Security.Cryptography;
using System.Text;
using System.Threading.Tasks;
using System.Xml.Linq;

namespace MyBlog.Data.Concrete.EfCore
{
    public static class SeedDatabase
    {
        public static void Seed()
        {
            var context = new BlogContext();

            if (context.Database.GetPendingMigrations().Count() == 0)
            {
                if (context.Categories.Count() == 0)
                {
                    context.Categories.AddRange(Categories);
                }
                if (context.Blogs.Count() == 0)
                {
                    context.Blogs.AddRange(Blogs);
                    context.AddRange(BlogCategories);
                }
                if (context.Authors.Count() == 0)
                {
                    context.Authors.AddRange(Authors);
                }
                if (context.Comments.Count() == 0)
                {
                    context.Comments.AddRange(Comments);
                }
                if (context.Messages.Count() == 0)
                {
                    context.Messages.AddRange(Messages);
                }
            }
            context.SaveChanges();
        }
        private static Category[] Categories =
        {
             new Category(){CategoryName="Asp.NET",Url="asp.net"},
             new Category(){CategoryName="Asp.NET Core",Url="asp.netcore"},
             new Category(){CategoryName="Asp.NET Mvc",Url="asp.netmvc"},
             new Category(){CategoryName="C-sharp - C#",Url="c-sharp-c#"},
             new Category(){CategoryName="Desing Patterns",Url="desingpatterns"},
             new Category(){CategoryName="LINQ",Url="linq"},
             new Category(){CategoryName="Entity Framework",Url="entityframework"},
             new Category(){CategoryName="Entity Framework Core",Url="entityframeworkcore"},
             new Category(){CategoryName="Web Api",Url="webapi"},
             new Category(){CategoryName="Veri Tabanı",Url="veritabani"},
             new Category(){CategoryName="SQL Server",Url="sqlserver"},

        };
        private static Blog[] Blogs =
        {
           new Blog(){ Title="LINQ TO SQL",Url="linqtosql",Description="LINQ teknolojisi tamamen veri erişim işlemini daha kolay ve anlaşılır hale getirmek amaçlı tasarlanmıştır.Bu veri erişim yöntemleri LINQ TO XML, LINQ TO OBJECT ve LINQ TO SQL olarak veri kaynağına göre değişiklik göstermektedir.Ben burada LINQ TO SQL i anlatacağım.\r\n\r\nLINQ TO SQL, LINQ ile yazdığımız komutları ADO.NET providerlarına gönderir.ADO.NET providerları kendilerine gelen ifadeleri database e gönderir.Dönen sonuçlar DataReader tipinden döner(ADO.NET Providerlarına),providerler da sonucu IQueryable tipinden geri gönderirler.\r\n\r\nAdı üstünde LINQ TO SQL, yani SQL veri kaynağıyla çalışacağız.\r\nSQL Server’da Northwind veritabanını kullanacağımı belirtmek isterim.\r\nŞimdi LINQ ile SQL veri kaynağında çalışmak istiyorsam eğer, projeme Add New Item ile LINQ TO SQL Clasess eklemeliyiz.",Content="LINQ teknolojisi tamamen veri erişim işlemini daha kolay ve anlaşılır hale getirmek amaçlı tasarlanmıştır.Bu veri erişim yöntemleri LINQ TO XML, LINQ TO OBJECT ve LINQ TO SQL olarak veri kaynağına göre değişiklik göstermektedir.Ben burada LINQ TO SQL i anlatacağım.\r\n\r\nLINQ TO SQL, LINQ ile yazdığımız komutları ADO.NET providerlarına gönderir.ADO.NET providerları kendilerine gelen ifadeleri database e gönderir.Dönen sonuçlar DataReader tipinden döner(ADO.NET Providerlarına),providerler da sonucu IQueryable tipinden geri gönderirler.\r\n\r\nAdı üstünde LINQ TO SQL, yani SQL veri kaynağıyla çalışacağız.\r\nSQL Server’da Northwind veritabanını kullanacağımı belirtmek isterim.\r\nŞimdi LINQ ile SQL veri kaynağında çalışmak istiyorsam eğer, projeme Add New Item ile LINQ TO SQL Clasess eklemeliyiz.", ImgUrl="1.jpg",Puan="7",CreateDate=new DateTime(2023,04,10),AuthorId=1,IsApproved=true},
           new Blog(){ Title="Lambda İfadeleri (Lambda Expressions)",Url="lambdaİfadeleri",Description="Lambda ifadeleri anonim bir fonksiyon olarak isimlendirilebilir.Dikkatinizi çekerim ki, metod değil de fonksiyon olarak tanımlıyorum.Temelde belli bir giriş değerine, sonuç üreten bir fonksiyon tipidir.",Content="Bu ifadenin sol tarafında fonksiyonda kullanılacak bir değişken tanımlanırken, sağ tarafında ise o değişken değerinde sonuç üretek ifadeler yer alır.Kısada solundaki ifade, sağındaki ifadeye parametre olarak geçirilir.\r\n\r\nÖrnek olarak;\r\n\r\nx => x+2\r\nY => (Y*2)/9\r\nAhmet => Ahmet > 0   //Sonuç olarak true ya da false üretir.\r\nHiç uzatmadan Lambda ifadelerini nerde nasıl kullanacağız inceleyelim.\r\nİncelememizi örnek bir int tipinden dizi değişkenimiz üzerinde yapacağız.", ImgUrl="1.jpg",Puan="10",CreateDate=new DateTime(2023,04,11),AuthorId=1,IsApproved=true},
           new Blog(){ Title="Asp.NET – Master Page Kullanımı",Url="aspnet–masterpagekullanimi",Description="Günümüzün sitelerinde GENELLİKLE Header,Menü ve Footer bölümlerinin, bütün sayfalarda aynı İçerik kısmının değişik olduğu dikkatinizi çekmedimi.Örnek olarak şu anda bulunduğunuz sitemi vereyim.Sitemin anasayfasına bakarsanız eğer(bloğumdan bahsediyorum)  Kategoriler,Etiketler vs.. bulunduğu bölüm yani sol menü ve Başlık kısmı bütün sayfalarda aynı geliyor.Ancak içerik kısmı(yazıların yayınlandığı kısım) sürekli değişiyor.İşte Master Page ile Header,Menü ve Footer kısımlarını sabit tutup, İçerik kısmını değiştirilebilir yapacağız.\r\nMaster Page ‘ den türeyen sayfalarda Header,Menü ve Footer kısımlarını değiştirme gibi bir imkanımız olmayacak.",Content="Web projelerimizde, sitemizin şeması belirli bir yapıda olup, belirli alanların dinamik ya da statik bir biçimde değiştirilmesi durumunda, her sayfada aynı şemayı tasarlayıp o şema üzerinde değiştirilicek yerlerin modifikasyonunu yapmak zahmetli bir iş olmakla beraber karışıklılığa yol açabilir.Bu durumda Asp.NET bize Master Page kontrolünü sunmaktadır.Sitemizin tasarımını Master Page sayfasında yapıp, o tasarımı kullanacak sayfalarıda bu Master Page sayfasından türeteceğiz.", ImgUrl="1.jpg",Puan="14",CreateDate=new DateTime(2023,04,11),AuthorId=1,IsApproved=true},
           new Blog(){ Title="Asp.NET Core MVC – Smidge Kütüphanesiyle Bundle İşlemi",Url="aspnet–coremvc–smidgekutuphanesi",Description="Bu içeriğimizde Asp.NET Core MVC uygulamalarında büyük boyutlu JavaScript ve CSS dosyalarının boyutlarını küçültmek için sarmak/kundaklamak manasına gelen bundle işlemini çalışma zamanında yapmamızı sağlayan Smidge kütüphanesi üzerine konuşacağız.",Content="Bundling & Minification Ne Demektir?\r\nWeb sitelerinde performans ve yüklenme hızlarını arttırmak için yapılan eylemleri tarif etmek için kullanılan terimlerdir.\r\n\r\nBundling; anlamsal olarak ‘gruplama’ demektir ve köken olarak(bund) ‘federasyon’ yahut ‘dernek’ kökeninden gelmektedir. Buradan da anlaşılan birden fazla JavaScript, CSS vs. gibi dosyaları tekbir dosyada birleştirmektir.\r\n\r\nÖrneğin; 3 JS + 2 CSS dosyasını bundling ettikten sonra 1 JS + 1 CSS dosyası olarak çıktı verecektir.\r\n\r\nMinification; JS yahut CSS dosyalarının içeriklerinde bulunan gereksiz karakterlerin veya yorum satırlarının temizlenmesi ve böylece boyutlarının küçültülmesi işlemidir.", ImgUrl="1.jpg",Puan="10",CreateDate=new DateTime(2023,04,11),AuthorId=1,IsApproved=true},
           new Blog(){ Title="Asp.NET MVC – Web Api Nedir? Nasıl Oluşturulur?",Url="aspnet–mvc–webapi",Description="Günümüz uygulamaları yapısal olarak kendi bünyelerinde bir bütün teşkil etselerde kullanıcılara daha farklı hitap şekilleriyle piyasada fark yaratmaya çalışmaktadırlar ve bu hitap şekilleri yer yer uygulama üzerinde belirli noktaları dünyaya açacak kadar ileri derece fikirlerle zenginleştirilmektedir.",Content="API Nedir?\r\nAPI, Türkçe manası “Uygulama Geliştirme Arayüzü” olan “Application Programming Interface” kelimelerinin baş harflerinden meydana gelen bir sözcüktür. API sayesinde yazılım geliştiricileri, ellerindeki verileri yahut işlevsellikleri istedikleri sınırlılıkta dış dünyayla paylaşabilmekte ve bu paylaşım sürecinde tüm kontrolleri ellerinde tutabilmektedirler.\r\n\r\nDolayısıyla bu paylaşım neticesinde farklı uygulamalar yahut platformlar herşeyden(dil, platform, alt yapı vs.) bağımsız bir şekilde verilerden yahut işlevselliklerden istifade edebilir.\r\n\r\nNeden Web API Kullanmalıyız?\r\nSon yıllarda internete erişim olanağı çok farklı platformlar tarafından sağlandığı için dolayısıyla kullanıcıların ihtiyaçlarını sadece web siteleri karşılayamaz olmuştur. Bu platformlar bilgisayarlarla birlikte tabletler ve özellikle biribirinden farklı yetenekler sergileyen mobil telefonlardır. Haliyle uygulama geliştiricileri platformdan bağımsız bir şekilde kullanıcılara ulaşabilmek için uygulamadan da bağımsız API geliştirmeye yönelmektedirler. Geliştirilen bu API’ler tüm platform ve uygulamaların okuyup, anlamlandırabileceği XML veya JSON gibi veri tiplerini kullanarak hizmet sunmakta ve bu şekilde tüm bağımlılıklardan kendilerini arındırarak geliştiricilerin amaçları doğrultusunda son kullanıcılara hizmet verebilmektedirler.\r\n\r\nAsp.NET MVC İle Web API Nasıl Oluşturulur?\r\nŞimdi geldik makalemizin esas konusuna. Asp.NET MVC ile Web API konusunu detaylıca ele alabilmek için öncelikle boş bir Web API projesini oluşturalım. Ardından makalemizde örneklendirme yapabilmemiz için North Wind veritabanını Entity Framework ile projeye entegre edelim.", ImgUrl="1.jpg",Puan="11",CreateDate=new DateTime(2023,04,12),AuthorId=1,IsApproved=true},
           new Blog(){ Title="Asp.NET MVC 5’e Giriş Yapalım", Url="aspnetmvc5",Description="Microsoft’un .NET çatısı altında Asp.NET MVC mimarisine verdiği önem her geçen gün kendini göstermektedir.Şahsen Asp.NET Web Forms ile web programlayan ben Asp.NET MVC mimarisine geçiş yaptıktan sonra Asp.NET Web Forms yapısını unutmaya başladım.",Content="Microsoft’un .NET çatısı altında Asp.NET MVC mimarisine verdiği önem her geçen gün kendini göstermektedir.Şahsen Asp.NET Web Forms ile web programlayan ben Asp.NET MVC mimarisine geçiş yaptıktan sonra Asp.NET Web Forms yapısını unutmaya başladım.Bunun bir çok sebebi olmasının yanı sıra Asp.NET MVC mimarisinin çok geniş ve her geçen gün güncel yapılarının doğmasından kaynaklanmaktadır.Bu doğan yapılar hem çok kullanışlı hem de yeni düzen internet dünyasına uyumlu bir altyapı sergilemektedirler.Gel gör ki, bu yapıların üzerine bu sefer yeni tasarısıyla Asp.NET MVC 5 gelmiştir.Asp.NET MVC 5 mimarisini kısaca özetlemek gerekirse, bir çok getirdiği yeni özelliğinin yanında Attribute Routing yapısını getirmesi en büyük yeniliklerinden birisidir.Şimdi gelin hepberaber, Asp.NET MVC 5’e temel bir giriş yapalım.\r\n\r\nVisual Studio ortamında bir Asp.NET MVC 5 projesi açarken sizi, önceki deneyimlerinizden çok uzak bir başlangıç ekranı karşılamaktadır.Bana sorarsanız Asp.NET MVC mimarisinden bihaber olan biri MVC öğrenmek için Asp.NET MVC 4 versiyonuna kadar temel versiyonları öğrenmek zorunda, lakin Asp.NET MVC 5 için ise önceki versiyonları bilmeden yeni ve sıfırdan bir başlangıç yapabilmektedir.", ImgUrl="1.jpg",Puan="12",CreateDate=new DateTime(2023,04,13),AuthorId=1,IsApproved=true},
           new Blog(){ Title="C#’ta IEnumerable ve IEnumerator Interfaceleri Nedir? ve Nasıl Kullanılır?",Url="c#taienumerableveienumerator",Description="C#’ta koleksiyon yahut array yapıları üzerinde periyodik bir düzende dönmemizi ve verileri bu şekilde tek tek elde etmemizi sağlayan foreach döngüsünün temel çalışma prensibi olan iterasyon mantığının kendi sınıflarımız üzerinde nasıl uygulanacağını inceleyeceğiz.",Content="C#’ta koleksiyon yahut array yapıları üzerinde periyodik bir düzende dönmemizi ve verileri bu şekilde tek tek elde etmemizi sağlayan foreach döngüsünün temel çalışma prensibi olan iterasyon mantığının kendi sınıflarımız üzerinde nasıl uygulanacağını inceleyeceğiz. Biliyorsunuz ki C#’ta iterasyon dendiğinde akla ilk olarak foreach döngüsü gelmektedir. Yani, bir sınıfa iterasyon özelliği kazandırabilirsek foreach döngüsü bu sınıfla etkileşime girebilecek iterasyonun periyoduna göre ilgili sınıf içerisinde belirlenen işlemleri gerçekleştirecek. Bir sınıfa iterasyon özelliklerini kazandırmak için gereken tüm özellikler IEnumerator interface’i aracılığıyla elde edilebilmektedir. IEnumerable interface’i ise bir sınıfa foreach mekanizması tarafından tanınması için gerekli yetenekleri/nitelikleri kazandırır. Yani enumerator yapısını… Şimdi gelin bu iki interface yapısını detaylıca irdeleyerek, nasıl kullanıldıklarına değinelim.\r\n\r\nŞimdi herşeyi en temelden ele alarak anlatmaya başlayalım.\r\n\r\nHani koleksiyonlarda kullandığımız “List” gibi, “Dictionary” gibi referanslardan üretilen nesneler direkt olarak foreach döngüsüne verilebilmektedir. Öyne değil mi?", ImgUrl="1.jpg",Puan="4",CreateDate=new DateTime(2023,04,14),AuthorId=1,IsApproved=true},
           new Blog(){ Title="Dependency Injection(DI) – Ninject",Url="dependencyinjection-ninject",Description="Önceki yazılarımdan Dependency Injection(DI) Nedir? Nasıl Uygulanır? başlıklı yazımda Dependency Injection desenine detaylıca değinmiştik. Bu yazımızda ise bu desene uygun tasarlanmış Inversion of Control(IoC) Framework’ü olan Ninject üzerine konuşacağız.",Content="Önceki yazılarımdan Dependency Injection(DI) Nedir? Nasıl Uygulanır? başlıklı yazımda Dependency Injection desenine detaylıca değinmiştik. Bu yazımızda ise bu desene uygun tasarlanmış Inversion of Control(IoC) Framework’ü olan Ninject üzerine konuşacağız.\r\n\r\nBiliyoruz ki, uygulama içerisinde nesne yaratma sürecinin sizden alınıp, bunun bir çatıya yani Framework’e devredilmesi işlemine Inversion of Control denmektedir. Dependency Injection deseninin ise işlevsel olarak, nesneler arasında bağımlılıkları soyutlama görevini yürüttüğünü biliyoruz. İşte Ninject – IoC Library’si, DI desenini basitçe uygulayabilmemizi ve kullanmamızı sağlayan hazır bir Container(kapsayıcı) olarak inşa edilmiştir.", ImgUrl="1.jpg",Puan="7",CreateDate=new DateTime(2023,04,15),AuthorId=1,IsApproved=true},
           new Blog(){ Title="Dependency Injection(DI) – Ninject",Url="dependencyinjection-ninject",Description="Önceki yazılarımdan Dependency Injection(DI) Nedir? Nasıl Uygulanır? başlıklı yazımda Dependency Injection desenine detaylıca değinmiştik. Bu yazımızda ise bu desene uygun tasarlanmış Inversion of Control(IoC) Framework’ü olan Ninject üzerine konuşacağız.",Content="Önceki yazılarımdan Dependency Injection(DI) Nedir? Nasıl Uygulanır? başlıklı yazımda Dependency Injection desenine detaylıca değinmiştik. Bu yazımızda ise bu desene uygun tasarlanmış Inversion of Control(IoC) Framework’ü olan Ninject üzerine konuşacağız.\r\n\r\nBiliyoruz ki, uygulama içerisinde nesne yaratma sürecinin sizden alınıp, bunun bir çatıya yani Framework’e devredilmesi işlemine Inversion of Control denmektedir. Dependency Injection deseninin ise işlevsel olarak, nesneler arasında bağımlılıkları soyutlama görevini yürüttüğünü biliyoruz. İşte Ninject – IoC Library’si, DI desenini basitçe uygulayabilmemizi ve kullanmamızı sağlayan hazır bir Container(kapsayıcı) olarak inşa edilmiştir.", ImgUrl="1.jpg",Puan="7",CreateDate=new DateTime(2023,04,15),AuthorId=1,IsApproved=true},
           new Blog(){ Title="Dependency Injection(DI) – Ninject",Url="dependencyinjection-ninject",Description="Önceki yazılarımdan Dependency Injection(DI) Nedir? Nasıl Uygulanır? başlıklı yazımda Dependency Injection desenine detaylıca değinmiştik. Bu yazımızda ise bu desene uygun tasarlanmış Inversion of Control(IoC) Framework’ü olan Ninject üzerine konuşacağız.",Content="Önceki yazılarımdan Dependency Injection(DI) Nedir? Nasıl Uygulanır? başlıklı yazımda Dependency Injection desenine detaylıca değinmiştik. Bu yazımızda ise bu desene uygun tasarlanmış Inversion of Control(IoC) Framework’ü olan Ninject üzerine konuşacağız.\r\n\r\nBiliyoruz ki, uygulama içerisinde nesne yaratma sürecinin sizden alınıp, bunun bir çatıya yani Framework’e devredilmesi işlemine Inversion of Control denmektedir. Dependency Injection deseninin ise işlevsel olarak, nesneler arasında bağımlılıkları soyutlama görevini yürüttüğünü biliyoruz. İşte Ninject – IoC Library’si, DI desenini basitçe uygulayabilmemizi ve kullanmamızı sağlayan hazır bir Container(kapsayıcı) olarak inşa edilmiştir.", ImgUrl="1.jpg",Puan="7",CreateDate=new DateTime(2023,04,15),AuthorId=1,IsApproved=true},
           new Blog(){ Title="Dependency Injection(DI) – Ninject",Url="dependencyinjection-ninject",Description="Önceki yazılarımdan Dependency Injection(DI) Nedir? Nasıl Uygulanır? başlıklı yazımda Dependency Injection desenine detaylıca değinmiştik. Bu yazımızda ise bu desene uygun tasarlanmış Inversion of Control(IoC) Framework’ü olan Ninject üzerine konuşacağız.",Content="Önceki yazılarımdan Dependency Injection(DI) Nedir? Nasıl Uygulanır? başlıklı yazımda Dependency Injection desenine detaylıca değinmiştik. Bu yazımızda ise bu desene uygun tasarlanmış Inversion of Control(IoC) Framework’ü olan Ninject üzerine konuşacağız.\r\n\r\nBiliyoruz ki, uygulama içerisinde nesne yaratma sürecinin sizden alınıp, bunun bir çatıya yani Framework’e devredilmesi işlemine Inversion of Control denmektedir. Dependency Injection deseninin ise işlevsel olarak, nesneler arasında bağımlılıkları soyutlama görevini yürüttüğünü biliyoruz. İşte Ninject – IoC Library’si, DI desenini basitçe uygulayabilmemizi ve kullanmamızı sağlayan hazır bir Container(kapsayıcı) olarak inşa edilmiştir.", ImgUrl="1.jpg",Puan="7",CreateDate=new DateTime(2023,04,15),AuthorId=1,IsApproved=true},
           new Blog(){ Title="Dependency Injection(DI) – Ninject",Url="dependencyinjection-ninject",Description="Önceki yazılarımdan Dependency Injection(DI) Nedir? Nasıl Uygulanır? başlıklı yazımda Dependency Injection desenine detaylıca değinmiştik. Bu yazımızda ise bu desene uygun tasarlanmış Inversion of Control(IoC) Framework’ü olan Ninject üzerine konuşacağız.",Content="Önceki yazılarımdan Dependency Injection(DI) Nedir? Nasıl Uygulanır? başlıklı yazımda Dependency Injection desenine detaylıca değinmiştik. Bu yazımızda ise bu desene uygun tasarlanmış Inversion of Control(IoC) Framework’ü olan Ninject üzerine konuşacağız.\r\n\r\nBiliyoruz ki, uygulama içerisinde nesne yaratma sürecinin sizden alınıp, bunun bir çatıya yani Framework’e devredilmesi işlemine Inversion of Control denmektedir. Dependency Injection deseninin ise işlevsel olarak, nesneler arasında bağımlılıkları soyutlama görevini yürüttüğünü biliyoruz. İşte Ninject – IoC Library’si, DI desenini basitçe uygulayabilmemizi ve kullanmamızı sağlayan hazır bir Container(kapsayıcı) olarak inşa edilmiştir.", ImgUrl="1.jpg",Puan="7",CreateDate=new DateTime(2023,04,15),AuthorId=1,IsApproved=true},
           new Blog(){ Title="Dependency Injection(DI) – Ninject",Url="dependencyinjection-ninject",Description="Önceki yazılarımdan Dependency Injection(DI) Nedir? Nasıl Uygulanır? başlıklı yazımda Dependency Injection desenine detaylıca değinmiştik. Bu yazımızda ise bu desene uygun tasarlanmış Inversion of Control(IoC) Framework’ü olan Ninject üzerine konuşacağız.",Content="Önceki yazılarımdan Dependency Injection(DI) Nedir? Nasıl Uygulanır? başlıklı yazımda Dependency Injection desenine detaylıca değinmiştik. Bu yazımızda ise bu desene uygun tasarlanmış Inversion of Control(IoC) Framework’ü olan Ninject üzerine konuşacağız.\r\n\r\nBiliyoruz ki, uygulama içerisinde nesne yaratma sürecinin sizden alınıp, bunun bir çatıya yani Framework’e devredilmesi işlemine Inversion of Control denmektedir. Dependency Injection deseninin ise işlevsel olarak, nesneler arasında bağımlılıkları soyutlama görevini yürüttüğünü biliyoruz. İşte Ninject – IoC Library’si, DI desenini basitçe uygulayabilmemizi ve kullanmamızı sağlayan hazır bir Container(kapsayıcı) olarak inşa edilmiştir.", ImgUrl="1.jpg",Puan="7",CreateDate=new DateTime(2023,04,15),AuthorId=1,IsApproved=true},
           new Blog(){ Title="Dependency Injection(DI) – Ninject",Url="dependencyinjection-ninject",Description="Önceki yazılarımdan Dependency Injection(DI) Nedir? Nasıl Uygulanır? başlıklı yazımda Dependency Injection desenine detaylıca değinmiştik. Bu yazımızda ise bu desene uygun tasarlanmış Inversion of Control(IoC) Framework’ü olan Ninject üzerine konuşacağız.",Content="Önceki yazılarımdan Dependency Injection(DI) Nedir? Nasıl Uygulanır? başlıklı yazımda Dependency Injection desenine detaylıca değinmiştik. Bu yazımızda ise bu desene uygun tasarlanmış Inversion of Control(IoC) Framework’ü olan Ninject üzerine konuşacağız.\r\n\r\nBiliyoruz ki, uygulama içerisinde nesne yaratma sürecinin sizden alınıp, bunun bir çatıya yani Framework’e devredilmesi işlemine Inversion of Control denmektedir. Dependency Injection deseninin ise işlevsel olarak, nesneler arasında bağımlılıkları soyutlama görevini yürüttüğünü biliyoruz. İşte Ninject – IoC Library’si, DI desenini basitçe uygulayabilmemizi ve kullanmamızı sağlayan hazır bir Container(kapsayıcı) olarak inşa edilmiştir.", ImgUrl="1.jpg",Puan="7",CreateDate=new DateTime(2023,04,15),AuthorId=1,IsApproved=true},
           new Blog(){ Title="Dependency Injection(DI) – Ninject",Url="dependencyinjection-ninject",Description="Önceki yazılarımdan Dependency Injection(DI) Nedir? Nasıl Uygulanır? başlıklı yazımda Dependency Injection desenine detaylıca değinmiştik. Bu yazımızda ise bu desene uygun tasarlanmış Inversion of Control(IoC) Framework’ü olan Ninject üzerine konuşacağız.",Content="Önceki yazılarımdan Dependency Injection(DI) Nedir? Nasıl Uygulanır? başlıklı yazımda Dependency Injection desenine detaylıca değinmiştik. Bu yazımızda ise bu desene uygun tasarlanmış Inversion of Control(IoC) Framework’ü olan Ninject üzerine konuşacağız.\r\n\r\nBiliyoruz ki, uygulama içerisinde nesne yaratma sürecinin sizden alınıp, bunun bir çatıya yani Framework’e devredilmesi işlemine Inversion of Control denmektedir. Dependency Injection deseninin ise işlevsel olarak, nesneler arasında bağımlılıkları soyutlama görevini yürüttüğünü biliyoruz. İşte Ninject – IoC Library’si, DI desenini basitçe uygulayabilmemizi ve kullanmamızı sağlayan hazır bir Container(kapsayıcı) olarak inşa edilmiştir.", ImgUrl="1.jpg",Puan="7",CreateDate=new DateTime(2023,04,15),AuthorId=1,IsApproved=true},
           new Blog(){ Title="Dependency Injection(DI) – Ninject",Url="dependencyinjection-ninject",Description="Önceki yazılarımdan Dependency Injection(DI) Nedir? Nasıl Uygulanır? başlıklı yazımda Dependency Injection desenine detaylıca değinmiştik. Bu yazımızda ise bu desene uygun tasarlanmış Inversion of Control(IoC) Framework’ü olan Ninject üzerine konuşacağız.",Content="Önceki yazılarımdan Dependency Injection(DI) Nedir? Nasıl Uygulanır? başlıklı yazımda Dependency Injection desenine detaylıca değinmiştik. Bu yazımızda ise bu desene uygun tasarlanmış Inversion of Control(IoC) Framework’ü olan Ninject üzerine konuşacağız.\r\n\r\nBiliyoruz ki, uygulama içerisinde nesne yaratma sürecinin sizden alınıp, bunun bir çatıya yani Framework’e devredilmesi işlemine Inversion of Control denmektedir. Dependency Injection deseninin ise işlevsel olarak, nesneler arasında bağımlılıkları soyutlama görevini yürüttüğünü biliyoruz. İşte Ninject – IoC Library’si, DI desenini basitçe uygulayabilmemizi ve kullanmamızı sağlayan hazır bir Container(kapsayıcı) olarak inşa edilmiştir.", ImgUrl="1.jpg",Puan="7",CreateDate=new DateTime(2023,04,15),AuthorId=1,IsApproved=true},
           new Blog(){ Title="Dependency Injection(DI) – Ninject",Url="dependencyinjection-ninject",Description="Önceki yazılarımdan Dependency Injection(DI) Nedir? Nasıl Uygulanır? başlıklı yazımda Dependency Injection desenine detaylıca değinmiştik. Bu yazımızda ise bu desene uygun tasarlanmış Inversion of Control(IoC) Framework’ü olan Ninject üzerine konuşacağız.",Content="Önceki yazılarımdan Dependency Injection(DI) Nedir? Nasıl Uygulanır? başlıklı yazımda Dependency Injection desenine detaylıca değinmiştik. Bu yazımızda ise bu desene uygun tasarlanmış Inversion of Control(IoC) Framework’ü olan Ninject üzerine konuşacağız.\r\n\r\nBiliyoruz ki, uygulama içerisinde nesne yaratma sürecinin sizden alınıp, bunun bir çatıya yani Framework’e devredilmesi işlemine Inversion of Control denmektedir. Dependency Injection deseninin ise işlevsel olarak, nesneler arasında bağımlılıkları soyutlama görevini yürüttüğünü biliyoruz. İşte Ninject – IoC Library’si, DI desenini basitçe uygulayabilmemizi ve kullanmamızı sağlayan hazır bir Container(kapsayıcı) olarak inşa edilmiştir.", ImgUrl="1.jpg",Puan="7",CreateDate=new DateTime(2023,04,15),AuthorId=1,IsApproved=true},
           new Blog(){ Title="Dependency Injection(DI) – Ninject",Url="dependencyinjection-ninject",Description="Önceki yazılarımdan Dependency Injection(DI) Nedir? Nasıl Uygulanır? başlıklı yazımda Dependency Injection desenine detaylıca değinmiştik. Bu yazımızda ise bu desene uygun tasarlanmış Inversion of Control(IoC) Framework’ü olan Ninject üzerine konuşacağız.",Content="Önceki yazılarımdan Dependency Injection(DI) Nedir? Nasıl Uygulanır? başlıklı yazımda Dependency Injection desenine detaylıca değinmiştik. Bu yazımızda ise bu desene uygun tasarlanmış Inversion of Control(IoC) Framework’ü olan Ninject üzerine konuşacağız.\r\n\r\nBiliyoruz ki, uygulama içerisinde nesne yaratma sürecinin sizden alınıp, bunun bir çatıya yani Framework’e devredilmesi işlemine Inversion of Control denmektedir. Dependency Injection deseninin ise işlevsel olarak, nesneler arasında bağımlılıkları soyutlama görevini yürüttüğünü biliyoruz. İşte Ninject – IoC Library’si, DI desenini basitçe uygulayabilmemizi ve kullanmamızı sağlayan hazır bir Container(kapsayıcı) olarak inşa edilmiştir.", ImgUrl="1.jpg",Puan="7",CreateDate=new DateTime(2023,04,15),AuthorId=1,IsApproved=true},
           new Blog(){ Title="Dependency Injection(DI) – Ninject",Url="dependencyinjection-ninject",Description="Önceki yazılarımdan Dependency Injection(DI) Nedir? Nasıl Uygulanır? başlıklı yazımda Dependency Injection desenine detaylıca değinmiştik. Bu yazımızda ise bu desene uygun tasarlanmış Inversion of Control(IoC) Framework’ü olan Ninject üzerine konuşacağız.",Content="Önceki yazılarımdan Dependency Injection(DI) Nedir? Nasıl Uygulanır? başlıklı yazımda Dependency Injection desenine detaylıca değinmiştik. Bu yazımızda ise bu desene uygun tasarlanmış Inversion of Control(IoC) Framework’ü olan Ninject üzerine konuşacağız.\r\n\r\nBiliyoruz ki, uygulama içerisinde nesne yaratma sürecinin sizden alınıp, bunun bir çatıya yani Framework’e devredilmesi işlemine Inversion of Control denmektedir. Dependency Injection deseninin ise işlevsel olarak, nesneler arasında bağımlılıkları soyutlama görevini yürüttüğünü biliyoruz. İşte Ninject – IoC Library’si, DI desenini basitçe uygulayabilmemizi ve kullanmamızı sağlayan hazır bir Container(kapsayıcı) olarak inşa edilmiştir.", ImgUrl="1.jpg",Puan="7",CreateDate=new DateTime(2023,04,15),AuthorId=1,IsApproved=true},
           new Blog(){ Title="Dependency Injection(DI) – Ninject",Url="dependencyinjection-ninject",Description="Önceki yazılarımdan Dependency Injection(DI) Nedir? Nasıl Uygulanır? başlıklı yazımda Dependency Injection desenine detaylıca değinmiştik. Bu yazımızda ise bu desene uygun tasarlanmış Inversion of Control(IoC) Framework’ü olan Ninject üzerine konuşacağız.",Content="Önceki yazılarımdan Dependency Injection(DI) Nedir? Nasıl Uygulanır? başlıklı yazımda Dependency Injection desenine detaylıca değinmiştik. Bu yazımızda ise bu desene uygun tasarlanmış Inversion of Control(IoC) Framework’ü olan Ninject üzerine konuşacağız.\r\n\r\nBiliyoruz ki, uygulama içerisinde nesne yaratma sürecinin sizden alınıp, bunun bir çatıya yani Framework’e devredilmesi işlemine Inversion of Control denmektedir. Dependency Injection deseninin ise işlevsel olarak, nesneler arasında bağımlılıkları soyutlama görevini yürüttüğünü biliyoruz. İşte Ninject – IoC Library’si, DI desenini basitçe uygulayabilmemizi ve kullanmamızı sağlayan hazır bir Container(kapsayıcı) olarak inşa edilmiştir.", ImgUrl="1.jpg",Puan="7",CreateDate=new DateTime(2023,04,15),AuthorId=1,IsApproved=true},
           new Blog(){ Title="Dependency Injection(DI) – Ninject",Url="dependencyinjection-ninject",Description="Önceki yazılarımdan Dependency Injection(DI) Nedir? Nasıl Uygulanır? başlıklı yazımda Dependency Injection desenine detaylıca değinmiştik. Bu yazımızda ise bu desene uygun tasarlanmış Inversion of Control(IoC) Framework’ü olan Ninject üzerine konuşacağız.",Content="Önceki yazılarımdan Dependency Injection(DI) Nedir? Nasıl Uygulanır? başlıklı yazımda Dependency Injection desenine detaylıca değinmiştik. Bu yazımızda ise bu desene uygun tasarlanmış Inversion of Control(IoC) Framework’ü olan Ninject üzerine konuşacağız.\r\n\r\nBiliyoruz ki, uygulama içerisinde nesne yaratma sürecinin sizden alınıp, bunun bir çatıya yani Framework’e devredilmesi işlemine Inversion of Control denmektedir. Dependency Injection deseninin ise işlevsel olarak, nesneler arasında bağımlılıkları soyutlama görevini yürüttüğünü biliyoruz. İşte Ninject – IoC Library’si, DI desenini basitçe uygulayabilmemizi ve kullanmamızı sağlayan hazır bir Container(kapsayıcı) olarak inşa edilmiştir.", ImgUrl="1.jpg",Puan="7",CreateDate=new DateTime(2023,04,15),AuthorId=1,IsApproved=true},
           new Blog(){ Title="Dependency Injection(DI) – Ninject",Url="dependencyinjection-ninject",Description="Önceki yazılarımdan Dependency Injection(DI) Nedir? Nasıl Uygulanır? başlıklı yazımda Dependency Injection desenine detaylıca değinmiştik. Bu yazımızda ise bu desene uygun tasarlanmış Inversion of Control(IoC) Framework’ü olan Ninject üzerine konuşacağız.",Content="Önceki yazılarımdan Dependency Injection(DI) Nedir? Nasıl Uygulanır? başlıklı yazımda Dependency Injection desenine detaylıca değinmiştik. Bu yazımızda ise bu desene uygun tasarlanmış Inversion of Control(IoC) Framework’ü olan Ninject üzerine konuşacağız.\r\n\r\nBiliyoruz ki, uygulama içerisinde nesne yaratma sürecinin sizden alınıp, bunun bir çatıya yani Framework’e devredilmesi işlemine Inversion of Control denmektedir. Dependency Injection deseninin ise işlevsel olarak, nesneler arasında bağımlılıkları soyutlama görevini yürüttüğünü biliyoruz. İşte Ninject – IoC Library’si, DI desenini basitçe uygulayabilmemizi ve kullanmamızı sağlayan hazır bir Container(kapsayıcı) olarak inşa edilmiştir.", ImgUrl="1.jpg",Puan="7",CreateDate=new DateTime(2023,04,15),AuthorId=1,IsApproved=true},
           new Blog(){ Title="Dependency Injection(DI) – Ninject",Url="dependencyinjection-ninject",Description="Önceki yazılarımdan Dependency Injection(DI) Nedir? Nasıl Uygulanır? başlıklı yazımda Dependency Injection desenine detaylıca değinmiştik. Bu yazımızda ise bu desene uygun tasarlanmış Inversion of Control(IoC) Framework’ü olan Ninject üzerine konuşacağız.",Content="Önceki yazılarımdan Dependency Injection(DI) Nedir? Nasıl Uygulanır? başlıklı yazımda Dependency Injection desenine detaylıca değinmiştik. Bu yazımızda ise bu desene uygun tasarlanmış Inversion of Control(IoC) Framework’ü olan Ninject üzerine konuşacağız.\r\n\r\nBiliyoruz ki, uygulama içerisinde nesne yaratma sürecinin sizden alınıp, bunun bir çatıya yani Framework’e devredilmesi işlemine Inversion of Control denmektedir. Dependency Injection deseninin ise işlevsel olarak, nesneler arasında bağımlılıkları soyutlama görevini yürüttüğünü biliyoruz. İşte Ninject – IoC Library’si, DI desenini basitçe uygulayabilmemizi ve kullanmamızı sağlayan hazır bir Container(kapsayıcı) olarak inşa edilmiştir.", ImgUrl="1.jpg",Puan="7",CreateDate=new DateTime(2023,04,15),AuthorId=1,IsApproved=false},
           new Blog(){ Title="Dependency Injection(DI) – Ninject",Url="dependencyinjection-ninject",Description="Önceki yazılarımdan Dependency Injection(DI) Nedir? Nasıl Uygulanır? başlıklı yazımda Dependency Injection desenine detaylıca değinmiştik. Bu yazımızda ise bu desene uygun tasarlanmış Inversion of Control(IoC) Framework’ü olan Ninject üzerine konuşacağız.",Content="Önceki yazılarımdan Dependency Injection(DI) Nedir? Nasıl Uygulanır? başlıklı yazımda Dependency Injection desenine detaylıca değinmiştik. Bu yazımızda ise bu desene uygun tasarlanmış Inversion of Control(IoC) Framework’ü olan Ninject üzerine konuşacağız.\r\n\r\nBiliyoruz ki, uygulama içerisinde nesne yaratma sürecinin sizden alınıp, bunun bir çatıya yani Framework’e devredilmesi işlemine Inversion of Control denmektedir. Dependency Injection deseninin ise işlevsel olarak, nesneler arasında bağımlılıkları soyutlama görevini yürüttüğünü biliyoruz. İşte Ninject – IoC Library’si, DI desenini basitçe uygulayabilmemizi ve kullanmamızı sağlayan hazır bir Container(kapsayıcı) olarak inşa edilmiştir.", ImgUrl="1.jpg",Puan="7",CreateDate=new DateTime(2023,04,15),AuthorId=1,IsApproved=false},
           new Blog(){ Title="Dependency Injection(DI) – Ninject",Url="dependencyinjection-ninject",Description="Önceki yazılarımdan Dependency Injection(DI) Nedir? Nasıl Uygulanır? başlıklı yazımda Dependency Injection desenine detaylıca değinmiştik. Bu yazımızda ise bu desene uygun tasarlanmış Inversion of Control(IoC) Framework’ü olan Ninject üzerine konuşacağız.",Content="Önceki yazılarımdan Dependency Injection(DI) Nedir? Nasıl Uygulanır? başlıklı yazımda Dependency Injection desenine detaylıca değinmiştik. Bu yazımızda ise bu desene uygun tasarlanmış Inversion of Control(IoC) Framework’ü olan Ninject üzerine konuşacağız.\r\n\r\nBiliyoruz ki, uygulama içerisinde nesne yaratma sürecinin sizden alınıp, bunun bir çatıya yani Framework’e devredilmesi işlemine Inversion of Control denmektedir. Dependency Injection deseninin ise işlevsel olarak, nesneler arasında bağımlılıkları soyutlama görevini yürüttüğünü biliyoruz. İşte Ninject – IoC Library’si, DI desenini basitçe uygulayabilmemizi ve kullanmamızı sağlayan hazır bir Container(kapsayıcı) olarak inşa edilmiştir.", ImgUrl="1.jpg",Puan="7",CreateDate=new DateTime(2023,04,15),AuthorId=1,IsApproved=false},
           new Blog(){ Title="Dependency Injection(DI) – Ninject",Url="dependencyinjection-ninject",Description="Önceki yazılarımdan Dependency Injection(DI) Nedir? Nasıl Uygulanır? başlıklı yazımda Dependency Injection desenine detaylıca değinmiştik. Bu yazımızda ise bu desene uygun tasarlanmış Inversion of Control(IoC) Framework’ü olan Ninject üzerine konuşacağız.",Content="Önceki yazılarımdan Dependency Injection(DI) Nedir? Nasıl Uygulanır? başlıklı yazımda Dependency Injection desenine detaylıca değinmiştik. Bu yazımızda ise bu desene uygun tasarlanmış Inversion of Control(IoC) Framework’ü olan Ninject üzerine konuşacağız.\r\n\r\nBiliyoruz ki, uygulama içerisinde nesne yaratma sürecinin sizden alınıp, bunun bir çatıya yani Framework’e devredilmesi işlemine Inversion of Control denmektedir. Dependency Injection deseninin ise işlevsel olarak, nesneler arasında bağımlılıkları soyutlama görevini yürüttüğünü biliyoruz. İşte Ninject – IoC Library’si, DI desenini basitçe uygulayabilmemizi ve kullanmamızı sağlayan hazır bir Container(kapsayıcı) olarak inşa edilmiştir.", ImgUrl="1.jpg",Puan="7",CreateDate=new DateTime(2023,04,15),AuthorId=1,IsApproved=false},
           new Blog(){ Title="Dependency Injection(DI) – Ninject",Url="dependencyinjection-ninject",Description="Önceki yazılarımdan Dependency Injection(DI) Nedir? Nasıl Uygulanır? başlıklı yazımda Dependency Injection desenine detaylıca değinmiştik. Bu yazımızda ise bu desene uygun tasarlanmış Inversion of Control(IoC) Framework’ü olan Ninject üzerine konuşacağız.",Content="Önceki yazılarımdan Dependency Injection(DI) Nedir? Nasıl Uygulanır? başlıklı yazımda Dependency Injection desenine detaylıca değinmiştik. Bu yazımızda ise bu desene uygun tasarlanmış Inversion of Control(IoC) Framework’ü olan Ninject üzerine konuşacağız.\r\n\r\nBiliyoruz ki, uygulama içerisinde nesne yaratma sürecinin sizden alınıp, bunun bir çatıya yani Framework’e devredilmesi işlemine Inversion of Control denmektedir. Dependency Injection deseninin ise işlevsel olarak, nesneler arasında bağımlılıkları soyutlama görevini yürüttüğünü biliyoruz. İşte Ninject – IoC Library’si, DI desenini basitçe uygulayabilmemizi ve kullanmamızı sağlayan hazır bir Container(kapsayıcı) olarak inşa edilmiştir.", ImgUrl="1.jpg",Puan="7",CreateDate=new DateTime(2023,04,15),AuthorId=1,IsApproved=false},
           new Blog(){ Title="Dependency Injection(DI) – Ninject",Url="dependencyinjection-ninject",Description="Önceki yazılarımdan Dependency Injection(DI) Nedir? Nasıl Uygulanır? başlıklı yazımda Dependency Injection desenine detaylıca değinmiştik. Bu yazımızda ise bu desene uygun tasarlanmış Inversion of Control(IoC) Framework’ü olan Ninject üzerine konuşacağız.",Content="Önceki yazılarımdan Dependency Injection(DI) Nedir? Nasıl Uygulanır? başlıklı yazımda Dependency Injection desenine detaylıca değinmiştik. Bu yazımızda ise bu desene uygun tasarlanmış Inversion of Control(IoC) Framework’ü olan Ninject üzerine konuşacağız.\r\n\r\nBiliyoruz ki, uygulama içerisinde nesne yaratma sürecinin sizden alınıp, bunun bir çatıya yani Framework’e devredilmesi işlemine Inversion of Control denmektedir. Dependency Injection deseninin ise işlevsel olarak, nesneler arasında bağımlılıkları soyutlama görevini yürüttüğünü biliyoruz. İşte Ninject – IoC Library’si, DI desenini basitçe uygulayabilmemizi ve kullanmamızı sağlayan hazır bir Container(kapsayıcı) olarak inşa edilmiştir.", ImgUrl="1.jpg",Puan="7",CreateDate=new DateTime(2023,04,15),AuthorId=1,IsApproved=false},
        };
        private static BlogCategory[] BlogCategories =
        {
            new BlogCategory(){Blog=Blogs[0],Category=Categories[0]},
            new BlogCategory(){Blog=Blogs[0],Category=Categories[3]},
            new BlogCategory(){Blog=Blogs[0],Category=Categories[5]},
            new BlogCategory(){Blog=Blogs[1],Category=Categories[0]},
            new BlogCategory(){Blog=Blogs[2],Category=Categories[1]},
            new BlogCategory(){Blog=Blogs[2],Category=Categories[3]},
            new BlogCategory(){Blog=Blogs[3],Category=Categories[2]},
            new BlogCategory(){Blog=Blogs[3],Category=Categories[8]},
            new BlogCategory(){Blog=Blogs[4],Category=Categories[2]},
            new BlogCategory(){Blog=Blogs[5],Category=Categories[3]},
            new BlogCategory(){Blog=Blogs[5],Category=Categories[4]},
            new BlogCategory(){Blog=Blogs[6],Category=Categories[3]},
            new BlogCategory(){Blog=Blogs[6],Category=Categories[4]},
            new BlogCategory(){Blog=Blogs[7],Category=Categories[3]},
            new BlogCategory(){Blog=Blogs[7],Category=Categories[4]},
            new BlogCategory(){Blog=Blogs[8],Category=Categories[3]},
            new BlogCategory(){Blog=Blogs[8],Category=Categories[4]},
            new BlogCategory(){Blog=Blogs[9],Category=Categories[3]},
            new BlogCategory(){Blog=Blogs[9],Category=Categories[4]},
            new BlogCategory(){Blog=Blogs[10],Category=Categories[3]},
            new BlogCategory(){Blog=Blogs[10],Category=Categories[4]},
            new BlogCategory(){Blog=Blogs[11],Category=Categories[3]},
            new BlogCategory(){Blog=Blogs[11],Category=Categories[4]},
            new BlogCategory(){Blog=Blogs[12],Category=Categories[3]},
            new BlogCategory(){Blog=Blogs[12],Category=Categories[4]},
            new BlogCategory(){Blog=Blogs[13],Category=Categories[3]},
            new BlogCategory(){Blog=Blogs[13],Category=Categories[4]},
            new BlogCategory(){Blog=Blogs[14],Category=Categories[3]},
            new BlogCategory(){Blog=Blogs[14],Category=Categories[4]},
            new BlogCategory(){Blog=Blogs[15],Category=Categories[3]},
            new BlogCategory(){Blog=Blogs[15],Category=Categories[4]},
            new BlogCategory(){Blog=Blogs[16],Category=Categories[3]},
            new BlogCategory(){Blog=Blogs[16],Category=Categories[4]},
            new BlogCategory(){Blog=Blogs[17],Category=Categories[3]},
            new BlogCategory(){Blog=Blogs[17],Category=Categories[4]},
            new BlogCategory(){Blog=Blogs[18],Category=Categories[3]},
            new BlogCategory(){Blog=Blogs[18],Category=Categories[4]},
            new BlogCategory(){Blog=Blogs[19],Category=Categories[3]},
            new BlogCategory(){Blog=Blogs[19],Category=Categories[4]},
            new BlogCategory(){Blog=Blogs[20],Category=Categories[3]},
            new BlogCategory(){Blog=Blogs[20],Category=Categories[4]},
            new BlogCategory(){Blog=Blogs[21],Category=Categories[3]},
            new BlogCategory(){Blog=Blogs[21],Category=Categories[4]},
            new BlogCategory(){Blog=Blogs[22],Category=Categories[3]},
            new BlogCategory(){Blog=Blogs[22],Category=Categories[4]},
            new BlogCategory(){Blog=Blogs[23],Category=Categories[3]},
            new BlogCategory(){Blog=Blogs[23],Category=Categories[4]},
            new BlogCategory(){Blog=Blogs[24],Category=Categories[3]},
            new BlogCategory(){Blog=Blogs[24],Category=Categories[4]},
            new BlogCategory(){Blog=Blogs[25],Category=Categories[3]},
            new BlogCategory(){Blog=Blogs[25],Category=Categories[4]},
            new BlogCategory(){Blog=Blogs[26],Category=Categories[3]},
            new BlogCategory(){Blog=Blogs[26],Category=Categories[4]},
        };
        private static Author[] Authors =
        {
           new Author(){ AuthorName="Ömer Faruk Gül", Email="omerfarukgul@gmail.com",Password="123", ImgUrl="admin.png",Descireption="Software Developer",About="Merhaba, ben bir bilgisayar programcısıyım ve özellikle .Net Core Framework'üne ilgi duyuyorum. C# diliyle web geliştirme konusunda kendimi geliştirmeye çalışıyorum ve bu alanda en son teknolojileri takip ediyorum."}
        };
        private static Comment[] Comments =
        {
           new Comment(){ UserName="Zeynep", Mail="zeyn@gmail.com",Yorum="Teşekkür Ederim", BlogId=1},
           new Comment(){ UserName="Ali", Mail="ali@gmail.com",Yorum="Çok Güzel içreik", BlogId=3},
           new Comment(){ UserName="Mehmet", Mail="zeyn@gmail.com",Yorum="Teşekkür Ederim", BlogId=2},
           new Comment(){ UserName="Hakan", Mail="zeyn@gmail.com",Yorum="Teşekkür Ederim", BlogId=1},
           new Comment(){ UserName="Zehra", Mail="zehra@gmail.com",Yorum="Anlatım için Sağloun", BlogId=4}
        };
        private static Messages[] Messages =
        {
            //Mail Göderme Çalımasi için mail adresi girin
           new Messages(){ Name="Ömer Faruk Gül", Email="@gmail.com",Title="Yazılımcı", Message="Yazılımcı Nasıl Olabilirim ?"}
        };

    }
}

